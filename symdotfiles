#!/usr/bin/env php

# =============================================================================
# Symlink files
# By Justin Sternberg <me@jtsternberg.com>
# https://github.com/jtsternberg/Dot-Files/blob/master/symdotfiles
#
# Version 2.0.0
#
# Creates symlinks to all files in the current directory
# to the directory above it.
#
# Usage:
# cd to this script's directory and..
# php symdotfiles [testrun] [hard]
# =============================================================================

<?php

$hard = false;
$testrun = false;
$dirs_only = false;
$working_dir = dirname( __FILE__ );
$destination_dir = $_SERVER['HOME'];

foreach ( (array) $argv as $arg ) {
	if ( ! $testrun ) {
		$testrun = 'testrun' == $arg;
	}
	if ( ! $hard ) {
		$hard = 'hard' == $arg;
	}
	if ( ! $dirs_only ) {
		$dirs_only = '--dirsonly' == $arg;
	}
	if ( 0 === strpos( $arg, '--dir=' ) ) {
		$working_dir = str_replace( '--dir=', '', $arg );
	}
	if ( 0 === strpos( $arg, '--destination=' ) ) {
		$destination_dir = realpath( str_replace( '--destination=', '', $arg ) );
	}
}

$destination_dir = rtrim( $destination_dir, '/\\' ) . '/';

$files = array_merge(
	glob( $working_dir . '/.*' ),
	glob( $working_dir . '/*' )
);

$is_test = $testrun ? ' (test run)' : '';
$is_hard = $hard ? ' (hard -- overwrite existing)' : '';
do_notice( "Making those symlinks$is_test$is_hard", true, "\n" );

$moved = '';
$ignore = array(
	'.DS_Store',
	'.',
	'..',
	'.git',
	'.gitmodules',
	'.gitignore',
	'zsh-custom',
	'private',
	'symdotfiles',
	'zsh-custom',
	'online-check.sh',
	'misc',
	'.zshrc.pre-oh-my-zsh',
);
$ignore_begins = array(
	'.',
);

$count = 0;
foreach( $files as $index => $file ) {
	$filepath = realpath( $file );
	$filename = basename( $file );
	if ( in_array( $filename, $ignore ) ) {
		continue;
	}

	foreach ( $ignore_begins as $needle ) {
		if ( 0 === strpos( $filename, $needle ) ) {
			continue 2;
		}
	}

	if ( $dirs_only && ! is_dir( $filename ) ) {
		continue;
	}

	$from = str_replace( $filename, '', $file );
	do_notice( ( ++$count ) .' File: ' . $filename, false, false );

	$newfile = $destination_dir . $filename;
	$exists  = file_exists( $newfile );

	if ( ! $hard ) {
		if ( $exists ) {
			do_notice( '    : Exists and will not be created.', false, false );
			continue;
		}
	}

	if ( ! $testrun ) {

		if ( $exists && $hard ) {
			$removed = is_dir( $newfile ) && ! is_link( $newfile )
				? rmdir( $newfile )
				: unlink( $newfile );

			if ( ! $removed ) {
				do_notice( '    : Could not be replaced.', false, false );
				continue;
			}
		}

		// do_notice( print_r( array( $filepath, $newfile ), true ) );
		$linked = symlink( $filepath, $newfile );

		if ( ! $linked ) {
			$moved = 'Was NOT moved to:';
		} else {
			$success = true;
		}
	}

	do_notice( '    '. $moved .' ' . $newfile, false, false );
}

function do_notice( $text, $before = true, $after = true ) {
	$text = html_entity_decode( $text );
	$stuff = `echo '>>>'`;
	if ( is_string( $before ) ) {
		echo $before;
	}
	echo $before ? "\n" . $stuff : '';
	echo `echo '\033[0;34m>> $text\033[0m'`;
	echo $after ? $stuff : '';
	if ( is_string( $after ) ) {
		echo $after . "\n\n";
	}
}
