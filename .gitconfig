[include]
    path = ~/.dotfiles/private/additional_config ;

; Custom
[alias]
	; List all aliases
	la = "!git config -l | grep alias | cut -c 7-"

	; basic shortcuts
	a = add -p
	aa = add
	aaa = add .
	cp = cherry-pick
	cher = cherry -v --abbrev master
	incoming = !(git fetch --quiet && git log --pretty=format:'%C(yellow)%h %C(white)- %C(red)%an %C(white)- %C(cyan)%d%Creset %s %C(white)- %ar%Creset' ..@{u})
	outgoing = !(git fetch --quiet && git log --pretty=format:'%C(yellow)%h %C(white)- %C(red)%an %C(white)- %C(cyan)%d%Creset %s %C(white)- %ar%Creset' @{u}..)
	st = status
	s = status --short -b
	cl = clone
	; Gets all submodules
	clr = clone --recursive
	c = commit
	p = push
	prb = pull --rebase
	rbc = rebase --continue
	rba = rebase --abort
	co = checkout
	cob = checkout -b
	br = branch -a
	brd = branch -d
	brv = branch -vva
	mote = remote -v
	deleteremote = "!f() {  \
		git push $1 :$2;     \
	}; f"

	zip = archive --format zip --output
	m = merge
	ms = merge --squash
	squerge = merge --squash ; http://wordpress.tv/2013/11/13/zack-tollman-enhancing-developer-creativity-with-git/
	amend = commit --amend --no-edit
	recommit = commit --amend
	dt = difftool

	; reset
	r = reset
	r1 = reset HEAD^
	r2 = reset HEAD^^
	rh = reset --hard
	rh1 = reset HEAD^ --hard
	rh2 = reset HEAD^^ --hard

	# Perform reset --hard on the specified branch
	# This allows us to remove the last n commits on a branch.
	# @param string $1 The branch where reset --hard should be applied.
	# @param string $2 The commit to be used as the new HEAD. Defaults to 'HEAD~1'.
	# e.g. git reset-hard-other-branch develop HEAD~3
	# performs git reset --hard HEAD~3 on branch `develop`.
	reset-hard-other-branch = "!f() {  \
		git checkout $1;                \
		git reset --hard ${2:-HEAD~1};  \
		git checkout @{-1};             \
	}; f"

	# Cherry-pick the last n commits from the last used branch ( @{-1} ).
	# @param int $1 The number of commits to cherry-pick. Defaults to 1.
	cherry-pick-last-n-from-last-branch = "!f() { \
		git cherry-pick @{-1}~${1:-1}...@{-1}~0;   \
	}; f"

	# Move to the given branch the last n commits.
	# @param string $1 The destination branch (create if does not exist).
	# @param int    $2 The number of commits to move. Defaults to 1.
	move = "!sh -c 'if [ -z "'$1'" ];                                   \
		then                                                             \
			echo "No destination branch supplied";                        \
		else                                                             \
			if [ `git rev-parse --verify --quiet "'$1'"` ];               \
				then                                                       \
					git checkout "'$1'";                                    \
					git cherry-pick-last-n-from-last-branch "'${2:-1}'";    \
					git reset-hard-other-branch @{-1} HEAD~"'${2:-1}'";     \
				else                                                       \
					git checkout -b "'$1'";                                 \
					git reset-hard-other-branch @{-1} HEAD~"'${2:-1}'";     \
			fi                                                            \
		fi'";

	; log stuff
	log = log --graph --decorate --stat --date=iso
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
	lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
	le = log --oneline --decorate
	lol = log --graph --decorate --pretty=oneline --abbrev-commit
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
	ldiff = diff --name-status
	diffname = diff --name-only
	listfiles = show --name-only
	stats = shortlog -sn
	topten = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format="%(refname:short)"
	recap = log --all --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --no-merges --author=justin@dsgnwrks.pro
	today = log --since=00:00:00 --all --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --no-merges --author=justin@dsgnwrks.pro


	; history
	filelog = log -u
	fl = log -u
	dl = "!git ll -1"
	dlc = diff --cached HEAD^
	dr = "!f() { git diff "$1"^.."$1"; }; f"
	lc = "!f() { git ll "$1"^.."$1"; }; f"
	diff = diff --word-diff
	; cdiff = diff --color-words
	cdiff = "!f() { git diff --color-words | diff-so-fancy; }; f"
	dc = diff --cached
	; Diff with highlight.
	d = "!f() { git diff "$1" | diff-so-fancy | less -r; }; f"
	; Diff last commit to previous
	diffl = "!f() { git diff HEAD^..HEAD | diff-so-fancy | less -r; }; f"
	; Diff a commit to its previous
	diffr = "!f() { git diff "$1"^.."$1" | diff-so-fancy | less -r; }; f"
	patch = "!f() { git --no-pager diff --color=never ${1%.} > patch.patch; }; f"

	; search
	f = "!git ls-files | grep -i"
	grep = grep -Ii
	gr = grep -Ii
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

	; assume
	assume = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"
	unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
	assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

	; tags
	lt = describe --tags --abbrev=0
	lasttag = lt
	dlt = "!f() { git tag -d `git lt`; }; f"
	deletelasttag = dlt
	nt = "!f() {\
		list='major minor patch subpatch';\
		if [[ $list =~ (^|[[:space:]])${1-patch}($|[[:space:]]) ]];\
		then\
			NEXTTAG=`git-nexttag \"$1\"`;\
		else\
			NEXTTAG=$1;\
		fi;\
		NOW=`date`;\
		git tag -a $NEXTTAG -m \"${2:-"$NEXTTAG, $NOW"}\";\
		git tag --sort=creatordate -n;\
	}; f"
	newtag = nt
	nexttag = "!f() { git-nexttag; }; f"
	pt = "!f() { git push && git push --tags; }; f"
	pushtags = pt
	remotetags = ls-remote --tags
	drt = deleteremote

	; stash
	sl = stash list
	sa = stash apply
	ss = stash save

	; submodules
	su = submodule update --init --recursive

	;git-svn
	svnr = svn rebase
	svnd = svn dcommit
	svnl = svn log --oneline --show-commit

	; changelog = "!_() { t=$(git describe --abbrev=0 --tags); git log ${t}..HEAD --no-merges --pretty=format:'* %s'; }; _"
	; changelog = "!_() { t=$(git describe --abbrev=0 --tags); git log ${t}..HEAD --no-merges --pretty=format:'%C(yellow)*%Cred%d %Creset%s%Cblue [%cn]'; }; _"
	changelog = "!_() { t=$(git describe --abbrev=0 --tags); git log ${t}..HEAD --no-merges --pretty=format:'%C(yellow)%h %Creset%s%Cblue [%cN - %ad]'; }; _"


; Environment
[core]
	editor = 'vim'
	symlinks = false
	excludesfile = /Users/jt/.gitignore_global
	autocrlf = false
	whitespace = cr-at-eol
	pager = less -r

[submodule]
	fetchJobs = 4

[push]
	default = simple

[color]
	ui = always
	branch = always
	diff = always
	interactive = always
	status = always
[color "diff"]
	meta = yellow bold
	; whitespace = red reverse
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red reverse bold
	newNormal = green bold
	newHighlight = 22 bold green

[interactive]
	diffFilter = diff-so-fancy | less -r

; diff and merge
[diff]
	guitool = kaleidoscope
	tool = Kaleidoscope
	noprefix = true
	compactionHeuristic = true
	renameLimit = 6000

[difftool]
	prompt = false
[merge]
	tool = Kaleidoscope

[difftool "kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[mergetool "kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true

[credential]
	helper = osxkeychain

[mergetool "sourcetree"]
	cmd = /usr/local/bin/ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true

[difftool "sourcetree"]
	cmd = /usr/local/bin/ksdiff -w \"$LOCAL\" \"$REMOTE\"
	path =

[difftool "Kaleidoscope"]
[difftool "Kaleidoscope"]
	cmd = ksdiff-wrapper git \"$LOCAL\" \"$REMOTE\"

[difftool]
	prompt = false
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustexitcode = true
[mergetool]
	prompt = false
