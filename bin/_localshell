#!/usr/bin/env php
<?php
namespace JT;
# =============================================================================
# Utility for managing LocalWP Site Shell scripts configuration.
# By Justin Sternberg <me@jtsternberg.com>
#
# Version 0.1.0
#
# Manages configuration for LocalWP's Site Shell scripts to modify directory paths.
#
# Usage:
# _localshell config --scriptPath="~/Local Sites/my-site/shell.sh"
# _localshell config --scriptPath="~/Local Sites/my-site/shell.sh" --destinationPath="~/projects"
# bash "$(_localshell)"  # Runs with saved configuration
# =============================================================================

$cli = require_once dirname(__DIR__) . '/misc/helpers.php';
$helpyHelperton = $cli->getHelp();
/*
$helpyHelperton
	->setScriptName('_localshell')
	->setPrefix('')
	->setDescription('Manages configuration for LocalWP\'s Site Shell scripts to modify directory paths.')
	->setup('_localshell', [
		' - Runs localshellupdater with saved configuration' => [''],
		'config' => [
			'--scriptPath=<path> [--destinationPath=<path>]',
			'Save configuration for future use',
			'--scriptPath=<path>      Path to LocalWP site shell script',
			'--destinationPath=<path> Custom destination path (optional)',
		],
	]);
 */
$helpyHelperton
	->setScriptName('bash "$(_localshell)"')
	->setDescription("Manages configuration for LocalWP's Site Shell scripts to modify directory paths.\n\nScript returns the path to the LocalWP site shell script. To run the\nLocalWP site shell script, you need to run `bash \"$(_localshell)\"`")
	->setupDefaultCommand([])
	->setup('_localshell', [
		'config' => [
			'--scriptPath=<path> [--destinationPath=<path>]',
			'Save configuration for future use',
			'--scriptPath=<path>      Path to LocalWP site shell script',
			'',
			"--destinationPath=<path> Custom destination path (optional)
                         Updates/overrides the directory that the LocalWP
                         site shell script will cd into after running.",
		],
	]);

if ($helpyHelperton->batSignal) {
	$cli->msg($helpyHelperton->getHelp($cli->getArg(1)));
	exit(0);
}

const CONFIG_FILE = '.localshell';

function findConfigFile($startDir, $maxLevels = 5) {
	$currentDir = rtrim($startDir, '/');
	$configPath = '';
	$levelsUp = 0;

	while ($levelsUp < $maxLevels) {
		$testPath = $currentDir . '/' . CONFIG_FILE;
		if (file_exists($testPath)) {
			$configPath = $testPath;
			break;
		}

		// Go up one directory
		$parentDir = dirname($currentDir);
		if ($parentDir === $currentDir) {
			// We've reached the root
			break;
		}

		$currentDir = $parentDir;
		$levelsUp++;
	}

	return $configPath;
}

// Handle config command
if ('config' === $cli->getArg(1)) {
	$config = [];
	$hasValidOption = false;

	$options = ['scriptPath', 'destinationPath'];
	foreach ($options as $option) {
		$value = $cli->getFlag($option);
		if ($value) {
			$config[$option] = $value;
			$hasValidOption = true;
		}
	}

	// Validate at least one option was provided
	if (!$hasValidOption) {
		$cli->err('Error: At least one option (--scriptPath or --destinationPath) is required');
		$cli->msg("\nRunning '_localshell config --help' for usage information...", 'yellow');
		$cli->msg("\n" . $helpyHelperton->getHelp('config'));
		exit(1);
	}

	// Save configuration
	$results = $cli->writeToFile(CONFIG_FILE, json_encode($config, JSON_PRETTY_PRINT), [
		'failExit' => false,
		'silent' => true,
	]);

	if (empty($results)) {
		$cli->err('Error: Unable to save configuration');
		exit(1);
	}

	$cli->msg('Configuration saved successfully', 'green');
	exit(0);
}

// Handle default command (no arguments)
if (empty($cli->getArg(1))) {
	// Check if config file exists in current or parent directories
	$configPath = findConfigFile($cli->wd);
	if (empty($configPath)) {
		$cli->err('Error: No configuration found. Run \'_localshell config\' first');
		$cli->msg("\nRunning '_localshell --help' for usage information...", 'yellow');
		$cli->msg($helpyHelperton->getHelp());
		exit(1);
	}

	// Load configuration
	$config = json_decode(file_get_contents($configPath), true);
	if (!$config || !isset($config['scriptPath'])) {
		$cli->err('Error: Invalid configuration file');
		exit(1);
	}

	// Convert paths to absolute
	$scriptPath = $cli->convertPathToAbsolute($config['scriptPath']);
	$cmd = ['localshellupdater', escapeshellarg($scriptPath)];

	if (isset($config['destinationPath'])) {
		$destinationPath = $cli->convertPathToAbsolute($config['destinationPath']);
		$cmd[] = escapeshellarg($destinationPath);
	}

	// Execute localshellupdater
	passthru(implode(' ', $cmd), $returnCode);
	exit($returnCode);
}

// Invalid command
$cli->err("Error: Unknown command '{$cli->getArg(1)}'");
$cli->msg("\nRunning '_localshell --help' for usage information...", 'yellow');
$cli->msg($helpyHelperton->getHelp());
exit(1);
