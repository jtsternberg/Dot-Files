#!/usr/bin/env php
<?php
namespace JT;
# =============================================================================
# Utility for updating LocalWP Site Shell scripts.
# By Justin Sternberg <me@jtsternberg.com>
#
# Version 0.1.0
#
# Updates LocalWP's Site Shell scripts to modify the directory paths and enhance functionality.
# Primarily used to:
# 1. Append "/wp-content" to the default LocalWP app/public path
# 2. Replace the default path with a custom path
# 3. Add lazygit integration for git repositories
#
# Usage:
# localshellupdater <path-to-shell-script>           # Appends "/wp-content" to LocalWP path
# localshellupdater <path-to-shell-script> <newpath> # Replaces LocalWP path with new path
#
# Examples:
# localshellupdater ~/Local\ Sites/my-site/shell.sh             # Adds "/wp-content" to path
# localshellupdater ~/Local\ Sites/my-site/shell.sh ~/projects  # Changes path to "~/projects"
# =============================================================================

$cli = require_once dirname(__DIR__) . '/misc/helpers.php';
$helpyHelperton = $cli->getHelp();

$helpyHelperton
	->setScriptName('localshellupdater')
	->setPrefix('')
	->setDescription('Updates LocalWP\'s Site Shell scripts to modify the directory paths and enhance functionality.')
	->setSampleUsage('<path-to-shell-script> [<new-path>]')
	->buildDocs([
		'<path-to-shell-script>' => 'Path to the LocalWP shell script to update',
		'[<new-path>]'          => 'Optional custom path to replace the default LocalWP path. If not provided, "/wp-content" will be appended to the default path',
	]);

if ($helpyHelperton->batSignal) {
	$cli->msg($helpyHelperton->getHelp());
	exit(0);
}

// Validate required argument
$scriptPath = $cli->getArg(1);
if (!$scriptPath) {
	$cli->err('Error: Path to shell script is required');
	$cli->msg("\nRunning 'localshellupdater --help' for usage information...", 'yellow');
	$cli->msg($helpyHelperton->getHelp());
	exit(1);
}

// Check if the file exists
$scriptPath = $cli->convertPathToAbsolute($scriptPath);
if (!file_exists($scriptPath)) {
	$cli->exitErr("Error: File not found at '{$scriptPath}'");
}

// Read the file content
$originalContent = file_get_contents($scriptPath);

// Get optional new path
$newPath = $cli->getArg(2);

// Update the content based on whether a new path is provided
if ($newPath) {
	// Replace the entire `cd` line with the new path
	$newPath = $cli->convertPathToAbsolute($newPath);
	$updatedContent = preg_replace(
		'/cd "([^"]+\/app\/public)"/',
		'cd "' . rtrim($newPath, '/') . '"',
		$originalContent
	);
} else {
	// Append `/wp-content` to the existing path
	$updatedContent = preg_replace(
		'/cd "([^"]+\/app\/public)"/',
		'cd "$1/wp-content"',
		$originalContent
	);
}

// Open lazygit in the new shell if git is detected
$updatedContent = preg_replace(
	'/exec \$SHELL$/',
	'exec $SHELL -c \'git status && lazygit || echo "no git"; exec $SHELL\'',
	$updatedContent
);

if ($updatedContent === null) {
	$cli->exitErr('Error: Failed to update the script content');
}

// Save the updated content back to the file
$results = $cli->writeToFile($scriptPath, $updatedContent, [
	'relative' => false,
	'failExit' => false,
	'silent' => true,
]);

if (empty($results)) {
	$cli->exitErr("Error: Unable to write updated content to '{$scriptPath}'");
}

$cli->msg('Script updated successfully', 'green');

// Make the updated script executable
chmod($scriptPath, 0755);

// Execute the updated script
passthru($scriptPath);