#!/usr/bin/env php
<?php
namespace JT;
# =============================================================================
# Git User Activity Logger
# By Justin Sternberg <me@jtsternberg.com>
#
# Version 1.0.0
#
# Generates a log of Git activity for a given user over a specified time period.
#
# Examples:
# gituserlog "Justin Sternberg" 94
# gituserlog "Justin Sternberg"    # Uses default 7 days
# gituserlog config               # Create/edit .ghrepos config file
#
# Usage (`gituserlog -h`):
# gituserlog <author> [<days>]
# gituserlog config
# =============================================================================

require_once dirname( __DIR__ ) . '/vendor/autoload.php';
$cli = require_once dirname(__DIR__) . '/misc/helpers.php';
require_once dirname(__DIR__) . '/misc/RepoConfigTrait.php';
$helpyHelperton = $cli->getHelp();

$helpyHelperton
	->setScriptName('gituserlog')
	->setDescription('Generate a log of Git activity for a given user')
	->setSampleUsage('<author> [<days>] [--porcelain]')
	->setupDefaultCommand([
		'<author>'    => 'The Git author name to fetch activity for',
		'[<days>]'    => 'Number of days to look back (default: 7)',
		'--porcelain' => 'Output in porcelain format (for redirecting to file, etc.)',
      '' => 'E.g. gituserlog "Justin Sternberg" 94 --porcelain > gitactivity.log',
	])
	->setup('gituserlog', [
		'config' => [
			'',
			'Create/edit .ghrepos configuration file',
		],
	]);

if ($helpyHelperton->batSignal) {
	$cli->msg($helpyHelperton->getHelp($cli->getArg(1)));
	exit(0);
}

class GitUserLogger {
	use RepoConfigTrait;
	private $author;
	private $days = 7;
	private $logsdir;

	public function __construct(
		private $cli
	) {
	}

	public function init($author, $days = 7) {
		$this->author = $author;
		$this->days = $days;

		// Create a unique temp directory for this script
		$this->logsdir = sys_get_temp_dir() . '/gituserlog';

		// Ensure temp directory exists
		if (!is_dir($this->logsdir)) {
			mkdir($this->logsdir, 0777, true);
		}

		$this->loadRepos();

		return $this;
	}

    // loadRepos provided by RepoConfigTrait

	public function generate() {
		chdir($this->logsdir);

		if (empty($this->author)) {
			$this->cli->msg("\nFetching all authors...", 'yellow');
			$allAuthors = $this->getAllAuthors();
			$this->cli->msg("\n" . count($allAuthors) . " authors found", 'green');
			exit(implode("\n", $allAuthors) . "\n\n");
		}

		$porcelain = $this->cli->hasFlags('porcelain') ? ' --no-color' : '';

		$total = count($this->repos);
		$this->cli->msg("\nFetching commits for {$this->author} in last {$this->days} days...\n", 'yellow');

		foreach ($this->repos as $i => $repo) {
			$current = $i + 1;
			$this->cli->msg("[$current/$total] Processing ", 'yellow', false);
			if ($porcelain) {
				echo "[$current/$total] $repo\n";
			}
			$contents = $this->showUserLog($repo);
			if (empty($contents)) {
				$this->cli->msg(" done", 'green', false);
				$this->cli->msg(" (no commits found)");
				if ($porcelain) {
					echo "(no commits found for this period)\n\n";
				}
			} else {
				$this->cli->msg(" done\n", 'green');
				echo $contents;
			}
		}
		echo "\n";
	}

	private function getAllAuthors() {
		$allAuthors = [];
		$total = count($this->repos);
		foreach ($this->repos as $i => $repo) {
			$current = $i + 1;
			$this->cli->msg("\n[$current/$total] Checking {$repo}...", 'yellow', false);
			$authors = $this->getRepoAuthors($repo);
			$this->cli->msg(" found " . count($authors) . " authors", 'green');
			$allAuthors = array_merge($allAuthors, $authors);
			chdir($this->logsdir);
		}

		return array_unique(array_filter($allAuthors));
	}

	private function getRepoAuthors($repo) {
		$prev = !empty($this->cli->flags['silent']) ? $this->cli->flags['silent'] : false;
		$this->cli->flags['silent'] = '--silent';
		$repodir = $this->updateRepo($repo);

		if (!is_dir($repodir)) {
			return [];
		}

		chdir($repodir);
		$output = `git log --format='%aN' | sort -u 2>/dev/null`;

		if ($prev) {
			$this->cli->flags['silent'] = $prev;
		} else {
			unset($this->cli->flags['silent']);
		}

		return $output ? explode("\n", $output) : [];
	}

	private function showUserLog($repo) {
		$reponame = $this->updateRepo($repo);
		$porcelain = $this->cli->hasFlags('porcelain') ? ' --no-color' : '';
		$output = `git log --pretty=format:"%C(yellow)%h [%ai]%Cred%d %Creset%s%Cblue [%cn]%Creset" --decorate --date=short --reverse --all --since="{$this->days} days ago" --author="{$this->author}"$porcelain`;

		if (!empty($output)) {
			return $output . "\n\n";
		}
		chdir($this->logsdir);

		return '';
	}

	private function updateRepo($repo, $branch = 'master') {
		preg_match_all('~\/(.+)\.git~', $repo, $matches);

		if (empty($matches[1][0])) {
			die(print_r(compact('matches', 'repo'), true));
		}

		$reponame = $matches[1][0];
		$repodir = $this->logsdir . '/' . $reponame;
		[$path, $reponame] = explode($this->logsdir . '/', $repodir);

		if (is_dir($repodir)) {
			chdir($repodir);
			$this->cli->msg("{$reponame} updating...", 'cyan', false);
			`git pull --rebase --quiet 2>/dev/null`;
		} else {
			$this->cli->msg("{$reponame} cloning...", 'cyan', false);
			$output = `git clone $repo $repodir --quiet 2>&1`;
			if (!empty($output)) {
				throw new \Exception(
					sprintf(
						"Error: Failed to clone %s into %s.\nClone output: %s",
						$repo,
						$repodir,
						$output
					),
					__LINE__
				);
			}

			chdir($repodir);
		}

		`git checkout $branch --quiet 2>/dev/null`;

		return $repodir;
	}


    // editConfig provided by RepoConfigTrait

    // findConfigFile provided by RepoConfigTrait
}

$logger = new GitUserLogger($cli);

// Handle config command
if ('config' === $cli->getArg(1)) {
	$logger->editConfig();
	exit(0);
}

$author = $cli->getArg(1);
$days = $cli->getArg(2, 7);

if ($days <= 0 || !is_numeric($days)) {
	$cli->err("Days must be a positive number\n");
	$cli->msg($helpyHelperton->getHelp());
	exit(1);
}

try {
	$logger
		->init($author, $days)
		->generate();
} catch (\Exception $e) {
	$cli->err("\n\n{$e->getMessage()} on line {$e->getLine()}");
	$cli->err("\n\n" . print_r( [
		'class' => get_class( $e ),
		'code'  => $e->getCode(),
		'trace' => array_map( function( $line ) {
			return preg_replace( '~^#\d.? ~', '', $line );
		}, explode( "\n", $e->getTraceAsString() ) ),
	], true ) . "\n");
	exit(1);
}

