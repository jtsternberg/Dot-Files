#!/usr/bin/env php
<?php
namespace JT\CLI;
# =============================================================================
# Convert sublime .sublime-project files to VS Code .code-workspace files.
# By Justin Sternberg <me@jtsternberg.com>
# https://github.com/jtsternberg/Dot-Files/blob/master/bin/sublimetovscode
#
# Version 0.1.0
#
# Examples:
# `$ sublimetovscode myproject.sublime-project`
#
# Usage (`sublimetovscode -h`):
# sublimetovscode [<fileOrPath>] [<destFileOrPath>] [--excludeExcludes]
# =============================================================================

require_once dirname( __DIR__ ) . '/vendor/autoload.php';

$cli = require_once dirname( __DIR__ ) . '/misc/helpers.php';
$helpyHelperton = $cli->getHelp();

$helpyHelperton
	->setScriptName( 'sublimetovscode' )
	->setPrefix( '' )
	->setDescription( 'Convert sublime .sublime-project files to VS Code .code-workspace files.' )
	->setSampleUsage( '[<fileOrPath>] [<destFileOrPath>] [--excludeExcludes]' )
	->buildDocs( [
		'[<fileOrPath>]'         => 'The file to convert. If a path, will convert all files found.',
		'[<destFileOrPath>]'     => 'The destination .code-workspace file, or path if <file> is a path.',
		'-ee, --excludeExcludes' => 'Do not migrate the `file_exclude_patterns` and `folder_exclude_patterns` sections to the VS Code Workspace `files.exclude`',
	] );

if ( $helpyHelperton->batSignal ) {
	$cli->msg( $helpyHelperton->getHelp() );
	exit(0);
}

$filePath = $cli->getArg( 1, getcwd() );
$destination = $cli->getArg( 2 );
$excludeExcludes = $cli->hasFlags( 'excludeExcludes', 'ee' );
$file = basename( $filePath );

if ( is_dir( $filePath ) ) {
	$files = $cli->getDirFiles( $filePath, 'sublime-project' );
	$count = count( $files );
	if ( ! $cli->confirm( "Are you sure you want to convert all ({$count}) .sublime-project files in this direcotry ({$file})? [y/n]" ) ) {
		exit(1);
	}

	if ( $destination && ! is_dir( $destination ) ) {
		$cli->err( "Destination must be a path." );
		exit(1);
	}
    $cli->err( "Sorry, I haven't been implemented yet." );
    exit(1);

	// die( print_r( [
	// 	'50 $files' => array_splice( $files, 0, 50 ),
	// 	'count' => count( $files ),
	// ], true ) );
	foreach ( $files as $file ) {
	// 	$name = str_replace( '.sublime-project', '', $file );

	// 	if ( $destination ) {

	// 	}
	// 	.code-workspace
	// 	die( print_r( [
	// 	'$filePath' => $filePath,
	// 	'$excludeExcludes' => $excludeExcludes,
	// 	'$file' => $file,
	// 	'$name' => $name,
	// ], true ) );

	}
}

$name = str_replace( '.sublime-project', '', $file );
if (
	$destination
	&& ! is_dir( $destination )
	&& '.code-workspace' !== substr( $destination, -( strlen( '.code-workspace' ) ) )
) {
	$cli->err( "Destination must be a path or be a file with the `.code-workspace` extension." );
	exit(1);
}

if ( empty( $destination ) ) {
	$destination = $cli->wd;
}

$isPath = is_dir( $destination );
if ( $isPath ) {
	$newName = $name . '.code-workspace';
	$destination = $destination . DIRECTORY_SEPARATOR . $newName;
}

if ( file_exists( $destination ) ) {
	if ( ! $cli->confirm( "The destination file already exists: {$destination} \nDo you want to overwrite? [y/n]" ) ) {
		exit(1);
	}
}

if ( ! file_exists( $filePath ) ) {
    $cli->err( "File not found: {$filePath}" );
    exit(1);
}

ob_start();
include_once $filePath;
// grab the data from the output buffer and add it to our $content variable
$json = ob_get_clean();
$json = (new \Ahc\Json\Comment)->decode( $json, true );

if ( json_last_error() ) {
	$err = json_last_error_msg();
	$cli->err( "Error decoding .sublime-project file: {$err}" );
	exit(1);
}
if ( empty( $json['folders'] ) ) {
	$cli->err( "Error decoding .sublime-project file. Missing folders." );
	exit(1);
}

$newContent = [
	'folders' => [],
	'settings' => [
		'files.exclude' => [],
	],
];

foreach ( $json['folders'] as $folder ) {
	if ( $folder['path'] ) {
		$newContent['folders'][] = [
			'path' => $folder['path'],
		];
	}

    if ( ! $excludeExcludes ) {
        if ( ! empty( $folder['file_exclude_patterns'] ) ) {
            foreach ( $folder['file_exclude_patterns'] as $pattern ) {
                $newContent['settings']['files.exclude'][$pattern] = true;
            }
        }
        if ( ! empty( $folder['folder_exclude_patterns'] ) ) {
            foreach ( $folder['folder_exclude_patterns'] as $pattern ) {
                $newContent['settings']['files.exclude'][$pattern] = true;
            }
        }
    }
}

$cli->writeToFile( $destination, json_encode( $newContent, JSON_PRETTY_PRINT ), [
	'relative' => 0 !== strpos( $destination, '/' ),
	'failExit' => true,
	'flags' => 0,
] );

// $cli->err( 'Something went wrong when fetching.' );
exit(0);

function isRelativePath( $path ) {
	return 0 === strpos( $path, '~' );
}

function isAbsPath( $path ) {
	return 0 === strpos( $path, '/' );
}

function json_decode_commented($data, $assoc = false, $maxDepth = 512, $opts = 0) {
  $data = preg_replace('~
    (" (?:\\\\. | [^"])*+ ") | \# [^\v]*+ | // [^\v]*+ | /\* .*? \*/
  ~xs', '$1', $data);

  return json_decode($data, $assoc, $maxDepth, $opts);
}
