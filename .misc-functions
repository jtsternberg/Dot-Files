# tail a debug log in any WordPress directory
debuglog() { tail -f $1/wp-content/debug.log }

# trims and tails my global debug log
dwdebugtrim() {
	trim-front ~/Sites/dsgnwrks.pro/wp-content/debug.log ${1:-800} && echo "\n\033[0;32mNow tailing...\033[0m\n" && tail -f ~/Sites/dsgnwrks.pro/wp-content/debug.log
}

vdebugtrim() {
	trim-front ${vdebuglog} ${1:-800} && echo "\n\033[0;32mNow tailing...\033[0m\n" && tail -f $vdebuglog
}

# Open in MacDown
macdown() { open -a MacDown $1 }

# Open in Mou
mou() { open -a Mou $1 }

# Find in current directory
f() { find . -name "$1" }

# Get base64 string for file (works for svg)
base64-file() {
	cat $1 | openssl base64 | tr -d '\n' | pbcopy
}

# Helper to deploy to different servers using dandelion and different config files
dandeploy() {
	PREFIX=$*
	if [ -z "$PREFIX" ];
		then
			echo "Using dandelion.yml to deploy"
			dandelion deploy
		else
			echo "Using $PREFIX-dandelion.yml to deploy"
			dandelion --config=$PREFIX-dandelion.yml deploy
	fi
}

# Greate a gif from a movie file
gifify() {
	if [[ -n "$1" ]]; then
		GIF="${1%.*}.gif"
		if [[ $2 == '--good' ]]; then
			ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
			time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $GIF
			rm out-static*.png
		else
			ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $GIF
		fi
	else
		echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
	fi
}

# Create symlinks for entire directory. Uses wp-cli.. needs to be rewritten
dwsymlink() { cd ~/Sites/dsgnwrks.pro/ && wp dwsymlink go --frompath="$1" --topath="$2" $3 }

# Word-count all files of type X in current directory.
wc_all() {
	if [ -z "$1" ]
		then
			# then throw a message
			errmsg 'Please specify file extension (e.g. ".csv")' 'red'
	else
		start='*'
		string=$start$1
		find . -name $string -maxdepth ${2:-1} | xargs wc -l
	fi
}

# Cleans CSV files for proper import to sequal pro, and creates a *-clean version.
# Settings: http://b.ustin.co/1cfT5
# Get middle matches
# | Get end matches
# | Get beginning matches
# | Add a NULL value in front w/ comma to start off lines (for null unique key)
# clean_csv() {
# 	FILE=$1
# 	mkdir -p "clean"
# 	# NEWFILE=${FILE/\./-clean\.}
# 	NEWFILE="clean/$FILE"
# 	perl -pe 's/(?<=,)FALSE(?=,)/0/egim' $FILE |
# 	perl -pe 's/(?<=,)FALSE(?=$)/0/egim' |
# 	perl -pe 's/(?<=,)FALSE(?=\n)/0/egim' |
# 	perl -pe 's/(?<=,)FALSE(?=\r)/0/egim' |
# 	perl -pe 's/(?<=^)FALSE(?=,)/0/egim' |
# 	perl -pe 's/(?<=,)TRUE(?=,)/1/egim' |
# 	perl -pe 's/(?<=,)TRUE(?=$)/1/egim' |
# 	perl -pe 's/(?<=,)TRUE(?=\n)/1/egim' |
# 	perl -pe 's/(?<=,)TRUE(?=\r)/1/egim' |
# 	perl -pe 's/(?<=^)TRUE(?=,)/1/egim' |
# 	perl -pe 's/(?<=,)<NULL>(?=,)/NULL/egim' |
# 	perl -pe 's/(?<=,)<NULL>(?=$)/NULL/egim' |
# 	perl -pe 's/(?<=,)<NULL>(?=\n)/NULL/egim' |
# 	perl -pe 's/(?<=,)<NULL>(?=\r)/NULL/egim' |
# 	perl -pe 's/(?<=^)<NULL>(?=,)/NULL/egim' |
# 	perl -pe 's/^(?=.)/NULL,/gim' > $NEWFILE && echo "Finished cleaning. New file: $NEWFILE"
# }

# clean_these_csvs() {
# 	for f in $(find *.csv ! '(' -name '*-clean.csv' ')')
# 	do
# 		clean_csv $f
# 	done
# }
